<?php
/**
 * OverdueStateConfig
 *
 * PHP version 7.1+
 *
 * @category Class
 * @package  Killbill\Client\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kill Bill
 *
 * Kill Bill is an open-source billing and payments platform
 *
 * OpenAPI spec version: 0.22.11
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.22
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Killbill\Client\Swagger\Model;

use \ArrayAccess;
use \Killbill\Client\Swagger\ObjectSerializer;

/**
 * OverdueStateConfig Class Doc Comment
 *
 * @category Class
 * @package  Killbill\Client\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OverdueStateConfig implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OverdueStateConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
'isClearState' => 'bool',
'condition' => '\Killbill\Client\Swagger\Model\OverdueCondition',
'externalMessage' => 'string',
'isBlockChanges' => 'bool',
'isDisableEntitlement' => 'bool',
'subscriptionCancellationPolicy' => 'string',
'autoReevaluationIntervalDays' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
'isClearState' => null,
'condition' => null,
'externalMessage' => null,
'isBlockChanges' => null,
'isDisableEntitlement' => null,
'subscriptionCancellationPolicy' => null,
'autoReevaluationIntervalDays' => 'int32'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes(): array
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats(): array
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
'isClearState' => 'isClearState',
'condition' => 'condition',
'externalMessage' => 'externalMessage',
'isBlockChanges' => 'isBlockChanges',
'isDisableEntitlement' => 'isDisableEntitlement',
'subscriptionCancellationPolicy' => 'subscriptionCancellationPolicy',
'autoReevaluationIntervalDays' => 'autoReevaluationIntervalDays'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
'isClearState' => 'setIsClearState',
'condition' => 'setCondition',
'externalMessage' => 'setExternalMessage',
'isBlockChanges' => 'setIsBlockChanges',
'isDisableEntitlement' => 'setIsDisableEntitlement',
'subscriptionCancellationPolicy' => 'setSubscriptionCancellationPolicy',
'autoReevaluationIntervalDays' => 'setAutoReevaluationIntervalDays'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
'isClearState' => 'getIsClearState',
'condition' => 'getCondition',
'externalMessage' => 'getExternalMessage',
'isBlockChanges' => 'getIsBlockChanges',
'isDisableEntitlement' => 'getIsDisableEntitlement',
'subscriptionCancellationPolicy' => 'getSubscriptionCancellationPolicy',
'autoReevaluationIntervalDays' => 'getAutoReevaluationIntervalDays'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$swaggerModelName;
    }

    const SUBSCRIPTION_CANCELLATION_POLICY_END_OF_TERM = 'END_OF_TERM';
const SUBSCRIPTION_CANCELLATION_POLICY_IMMEDIATE = 'IMMEDIATE';
const SUBSCRIPTION_CANCELLATION_POLICY_NONE = 'NONE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSubscriptionCancellationPolicyAllowableValues(): array
    {
        return [
            self::SUBSCRIPTION_CANCELLATION_POLICY_END_OF_TERM,
self::SUBSCRIPTION_CANCELLATION_POLICY_IMMEDIATE,
self::SUBSCRIPTION_CANCELLATION_POLICY_NONE,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['isClearState'] = isset($data['isClearState']) ? $data['isClearState'] : null;
        $this->container['condition'] = isset($data['condition']) ? $data['condition'] : null;
        $this->container['externalMessage'] = isset($data['externalMessage']) ? $data['externalMessage'] : null;
        $this->container['isBlockChanges'] = isset($data['isBlockChanges']) ? $data['isBlockChanges'] : null;
        $this->container['isDisableEntitlement'] = isset($data['isDisableEntitlement']) ? $data['isDisableEntitlement'] : null;
        $this->container['subscriptionCancellationPolicy'] = isset($data['subscriptionCancellationPolicy']) ? $data['subscriptionCancellationPolicy'] : null;
        $this->container['autoReevaluationIntervalDays'] = isset($data['autoReevaluationIntervalDays']) ? $data['autoReevaluationIntervalDays'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        $allowedValues = $this->getSubscriptionCancellationPolicyAllowableValues();
        if (!is_null($this->container['subscriptionCancellationPolicy']) && !in_array($this->container['subscriptionCancellationPolicy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'subscriptionCancellationPolicy', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name): OverdueStateConfig
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets isClearState
     *
     * @return bool
     */
    public function getIsClearState()
    {
        return $this->container['isClearState'];
    }

    /**
     * Sets isClearState
     *
     * @param bool $isClearState isClearState
     *
     * @return $this
     */
    public function setIsClearState($isClearState): OverdueStateConfig
    {
        $this->container['isClearState'] = $isClearState;

        return $this;
    }

    /**
     * Gets condition
     *
     * @return \Killbill\Client\Swagger\Model\OverdueCondition
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     *
     * @param \Killbill\Client\Swagger\Model\OverdueCondition $condition condition
     *
     * @return $this
     */
    public function setCondition($condition): OverdueStateConfig
    {
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets externalMessage
     *
     * @return string
     */
    public function getExternalMessage()
    {
        return $this->container['externalMessage'];
    }

    /**
     * Sets externalMessage
     *
     * @param string $externalMessage externalMessage
     *
     * @return $this
     */
    public function setExternalMessage($externalMessage): OverdueStateConfig
    {
        $this->container['externalMessage'] = $externalMessage;

        return $this;
    }

    /**
     * Gets isBlockChanges
     *
     * @return bool
     */
    public function getIsBlockChanges()
    {
        return $this->container['isBlockChanges'];
    }

    /**
     * Sets isBlockChanges
     *
     * @param bool $isBlockChanges isBlockChanges
     *
     * @return $this
     */
    public function setIsBlockChanges($isBlockChanges): OverdueStateConfig
    {
        $this->container['isBlockChanges'] = $isBlockChanges;

        return $this;
    }

    /**
     * Gets isDisableEntitlement
     *
     * @return bool
     */
    public function getIsDisableEntitlement()
    {
        return $this->container['isDisableEntitlement'];
    }

    /**
     * Sets isDisableEntitlement
     *
     * @param bool $isDisableEntitlement isDisableEntitlement
     *
     * @return $this
     */
    public function setIsDisableEntitlement($isDisableEntitlement): OverdueStateConfig
    {
        $this->container['isDisableEntitlement'] = $isDisableEntitlement;

        return $this;
    }

    /**
     * Gets subscriptionCancellationPolicy
     *
     * @return string
     */
    public function getSubscriptionCancellationPolicy()
    {
        return $this->container['subscriptionCancellationPolicy'];
    }

    /**
     * Sets subscriptionCancellationPolicy
     *
     * @param string $subscriptionCancellationPolicy subscriptionCancellationPolicy
     *
     * @return $this
     */
    public function setSubscriptionCancellationPolicy($subscriptionCancellationPolicy): OverdueStateConfig
    {
        $allowedValues = $this->getSubscriptionCancellationPolicyAllowableValues();
        if (!is_null($subscriptionCancellationPolicy) && !in_array($subscriptionCancellationPolicy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'subscriptionCancellationPolicy', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['subscriptionCancellationPolicy'] = $subscriptionCancellationPolicy;

        return $this;
    }

    /**
     * Gets autoReevaluationIntervalDays
     *
     * @return int
     */
    public function getAutoReevaluationIntervalDays()
    {
        return $this->container['autoReevaluationIntervalDays'];
    }

    /**
     * Sets autoReevaluationIntervalDays
     *
     * @param int $autoReevaluationIntervalDays autoReevaluationIntervalDays
     *
     * @return $this
     */
    public function setAutoReevaluationIntervalDays($autoReevaluationIntervalDays): OverdueStateConfig
    {
        $this->container['autoReevaluationIntervalDays'] = $autoReevaluationIntervalDays;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
